{"version":3,"sources":["components/Chart.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","react_default","a","createElement","className","es","data","options","title","display","displayTitle","text","location","fontSize","scales","xAxes","barPercentage","barThickness","maxBarThickness","minBarLength","gridLines","drawBorder","offsetGridLines","color","drawTicks","drawOnChartArea","circular","yAxes","legend","displayLegend","position","legendPosition","Component","defaultProps","headerstyle","backgroundColor","textAlign","padding","border","float","cursor","Header","style","App","_this2","axios","create","withCredentials","get","then","res","response","console","log","ProductName","map","e","L1IssueCount","L2IssueCount","L3IssueCount","setState","labels","datasets","label","hoverBackgroundColor","catch","error","layout_Header","components_Chart","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAGMA,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAUT,EAAMS,WAHFR,wEAehB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,KAAMX,KAAKI,MAAMC,UACjBO,QAAS,CACPC,MAAM,CACJC,QAAQd,KAAKJ,MAAMmB,aACnBC,KAAK,gBAAgBhB,KAAKJ,MAAMqB,SAChCC,SAAS,IAEXC,OAAQ,CACNC,MAAO,CAAC,CACJC,cAAe,GACfC,aAAc,GACdC,gBAAiB,GACjBC,aAAc,EACdC,UAAW,CACPX,SAAS,EACTY,YAAY,EACZC,iBAAiB,EACjBC,MAAO,UACPC,WAAW,EACXC,iBAAgB,EAChBC,UAAU,KAKtBC,MAAO,CAAC,CACNX,cAAe,GACfC,aAAc,GACdC,gBAAiB,GACjBC,aAAc,EACdC,UAAW,CACPX,SAAS,EACTY,YAAY,EACZC,iBAAiB,EACjBC,MAAO,UACPC,WAAW,EACXC,iBAAgB,EAChBC,UAAU,MAMdE,OAAO,CACLnB,QAAQd,KAAKJ,MAAMsC,cACnBC,SAASnC,KAAKJ,MAAMwC,mBAK1B9B,EAAAC,EAAAC,cAAA,SACEG,KAAMX,KAAKI,MAAMC,UACjBO,QAAS,CACPC,MAAM,CACJC,QAAQd,KAAKJ,MAAMmB,aACnBC,KAAK,QAAQhB,KAAKJ,MAAMqB,SACxBC,SAAS,IAEXe,OAAO,CACLnB,QAAQd,KAAKJ,MAAMsC,cACnBC,SAASnC,KAAKJ,MAAMwC,2BA/EdC,aAAd1C,EAQG2C,aAAe,CACpBvB,cAAa,EACbmB,eAAe,EACfE,eAAe,QACfnB,SAAS,QA2FEtB,QC5Ff,IAAM4C,EAAY,CACdC,gBAAgB,OAChBZ,MAAM,UACNa,UAAU,SACVC,QAAQ,YACRC,OAAO,OACPC,MAAM,KACNC,OAAO,WAEIC,EArBf,WACI,OAEIxC,EAAAC,EAAAC,cAAA,UAAQuC,MAAOR,GACXjC,EAAAC,EAAAC,cAAA,4DCoKGwC,cA/Jb,SAAAA,IAAc,IAAAnD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IACZnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,QACKI,MAAQ,CACXC,UAAW,IAHDR,mFASM,IAAAoD,EAAAjD,KAMlBkD,IAAMC,OAAO,CACXC,iBAAiB,IAEhBC,IANwB,6CAOxBC,KACC,SAAAC,GACE,IAAIC,EAAWD,EAAI5C,KACnB8C,QAAQC,IAAI,uBACZD,QAAQC,IAAIF,GAEZ,IAAIG,EAAcH,EAASI,IAAI,SAAUC,GACvC,OAAOA,EAAEF,cAGPG,EAAeN,EAASI,IAAI,SAAUC,GACxC,OAAOA,EAAEC,eAEPC,EAAeP,EAASI,IAAI,SAAUC,GACxC,OAAOA,EAAEC,eAEPE,EAAeR,EAASI,IAAI,SAAUC,GACxC,OAAOA,EAAEG,eAGXf,EAAKgB,SAAS,CACZ5D,UAAW,CACT6D,OAAQP,EACRQ,SAAU,CACR,CACEC,MAAO,eACPzD,KAAMmD,EACNtB,gBAAiB,CACf,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACC6B,qBAAsB,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACED,MAAO,eACPzD,KAAMoD,EACNvB,gBAAiB,CAEf,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACC6B,qBAAsB,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACED,MAAO,eACPzD,KAAMqD,EACNxB,gBAAiB,CACf,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,wBACC6B,qBAAsB,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,gBAOVZ,QAAQC,IAAI,wBACZD,QAAQC,IAAIT,EAAK7C,MAAMC,aAE1BiE,MAAM,SAAAC,GACLd,QAAQC,IAAIa,sCAUhB,OADAd,QAAQC,IAAI1D,KAAKI,MAAMC,WAErBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMsC,MAAO,CAAEP,gBAAiB,UAC7ClC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACgE,EAAD,MAEAlE,EAAAC,EAAAC,cAAA,+BAGAR,KAAKI,MAAMC,UAAU8D,SACnB7D,EAAAC,EAAAC,cAACiE,EAAD,CAAOpE,UAAWL,KAAKI,MAAMC,UAAWY,SAAS,YAAYmB,eAAe,WACzE9B,EAAAC,EAAAC,cAAA,6BAxJG6B,aCEEqC,QACW,cAA7BC,OAAO1D,SAAS2D,UAEe,UAA7BD,OAAO1D,SAAS2D,UAEhBD,OAAO1D,SAAS2D,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.682ae027.chunk.js","sourcesContent":["import React, {Component} from '../../node_modules/react';\nimport {Bar, table } from '../../node_modules/react-chartjs-2';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    location:'City'\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <Bar\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Barchart for '+this.props.location,\n              fontSize:25\n            },\n            scales: {\n              xAxes: [{\n                  barPercentage: 0.5,\n                  barThickness: 43  ,\n                  maxBarThickness: 48,\n                  minBarLength: 0,\n                  gridLines: {\n                      display: true,\n                      drawBorder: true, \n                      offsetGridLines: true,\n                      color: '#242020',\n                      drawTicks: true,\n                      drawOnChartArea:true,\n                      circular: true\n\n                  }\n              }],\n        \n          yAxes: [{\n            barPercentage: 0.5,\n            barThickness: 43  ,\n            maxBarThickness: 48,\n            minBarLength: 0,\n            gridLines: {\n                display: true,\n                drawBorder: false, \n                offsetGridLines: true,\n                color: '#242020',\n                drawTicks: true,\n                drawOnChartArea:true,\n                circular: true\n\n            }\n        }]\n    },\n          \n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n\n        <table\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'table'+this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n\n        {/* <Pie\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Largest Cities In '+this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        /> */}\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React from 'react'\n// import { Link} from 'react-router-dom'\nfunction Header(){\n    return(\n        \n        <header style={headerstyle}>\n            <h1>Git Issue Widget  Dashboard</h1>\n            {/* <Link style={headerstyle} to=\"/\">Home</Link> |\n            <Link  style={headerstyle} to=\"/about\">About</Link> */}\n\n        </header>\n    )\n\n}\nconst headerstyle={\n    backgroundColor:'#333',\n    color:'#DCDCDC',\n    textAlign:'center',\n    padding:'30px 10px',\n    border:'10px',\n    float:'up',\n    cursor:'pointer'\n}\nexport default Header;  ","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\nimport Header from './components/layout/Header';\n//import Dataset from './dataSet/dataset';\n\nimport axios from 'axios';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      chartData: {}\n    }\n  }\n\n\n\n  componentDidMount() {\n    //const getProductNamesURL = hostUrl + '/products';\n    \n    const getProductNamesURL = \"http://localhost:9095/gitIssue/issueCount\";\n\n\n    axios.create({\n      withCredentials: false,\n    })\n      .get(getProductNamesURL)\n      .then(\n        res => {\n          var response = res.data;\n          console.log(\"Product res list : \");\n          console.log(response)\n\n          var ProductName = response.map(function (e) {\n            return e.ProductName;\n\n          });\n          var L1IssueCount = response.map(function (e) {\n            return e.L1IssueCount;\n          });;\n          var L2IssueCount = response.map(function (e) {\n            return e.L1IssueCount;\n          });;\n          var L3IssueCount = response.map(function (e) {\n            return e.L3IssueCount;\n          });;\n\n          this.setState({\n            chartData: {\n              labels: ProductName,\n              datasets: [\n                {\n                  label: 'L1IssueCount',\n                  data: L1IssueCount,\n                  backgroundColor: [\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(255, 99, 132, 0.6)'\n                  ], hoverBackgroundColor: [\n                    \"#f38b4a\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#6970d5\",\n                    \"#f38b4a\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#6970d5\"\n                  ]\n                },\n                {\n                  label: 'L2IssueCount',\n                  data: L2IssueCount,\n                  backgroundColor: [\n\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(54, 162, 235, 0.6)'\n                  ], hoverBackgroundColor: [\n                    \"#f38b4a\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#6970d5\",\n                    \"#f38b4a\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#6970d5\"\n                  ]\n                },\n                {\n                  label: 'L3IssueCount',\n                  data: L3IssueCount,\n                  backgroundColor: [\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)',\n                    'rgba(165,42,42, 0.6)'\n                  ], hoverBackgroundColor: [\n                    \"#f38b4a\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#6970d5\",\n                    \"#f38b4a\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#56d798\",\n                    \"#ff8397\",\n                    \"#6970d5\"\n                  ]\n                }\n\n              ]\n            }\n          });\n          console.log(\"Product Name list : \");\n          console.log(this.state.chartData)\n        })\n      .catch(error => {\n        console.log(error)\n      });\n\n  }\n\n\n  \n\n  render() {\n    console.log(this.state.chartData)\n    return (\n      <div className=\"App\" style={{ backgroundColor: \"black\" }}>\n        <div className=\"container\"  >\n          <Header />\n\n          <h2>Welcome to React</h2>\n        </div>\n        {\n          this.state.chartData.datasets ? (\n            <Chart chartData={this.state.chartData} location=\"git issue\" legendPosition=\"bottom\" />\n          ) : (<h2>no data</h2>)\n\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}